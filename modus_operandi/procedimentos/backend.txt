# üìå Plano de A√ß√£o: Configura√ß√£o do Backend

## **1. Configura√ß√£o do Ambiente**

	### **Depend√™ncias Necess√°rias:**
	- **Java 17+** (Zulu/OpenJDK recomendado)
	- **Maven**
	- **Spring Boot**

	### **Verifica√ß√£o da Instala√ß√£o:**
	Execute os comandos abaixo para confirmar que tudo est√° corretamente instalado:

		java -version
		mvn -version


	### **Configura√ß√£o das Vari√°veis de Ambiente:**
	Caso necess√°rio, adicionar Java e Maven ao `PATH` do sistema.

---

## **2. Criar o Projeto Spring Boot**

Crie o projeto utilizando o **Spring Initializr** acessando [start.spring.io](https://start.spring.io/).

	### **Passos:**
		1. Selecione **Maven Project**.
		2. Escolha a linguagem **Java**.
		3. Defina o **Group** como `com.projeto` e o **Artifact** como `backend`.
		4. Escolha a vers√£o do Spring Boot recomendada.
		5. Selecione as depend√™ncias essenciais:
		   - **Spring Web** (para criar APIs REST)
		   - **Spring Data JPA** (para integra√ß√£o com banco de dados)

		6. Clique em **Generate** e extraia o projeto no seu ambiente de desenvolvimento.


---

## **3. Definir a Estrutura de Pacotes (MVC)**

Criar a estrutura no diret√≥rio `/src/main/java/com/projeto` dentro do Eclipse ou manualmente:

	/backend/src/main/java/com/projeto
	  ‚îú‚îÄ‚îÄ controller   # Controladores (APIs REST)
	  ‚îú‚îÄ‚îÄ model        # Modelos de dados
	  ‚îú‚îÄ‚îÄ repository   # Acesso a dados
	  ‚îú‚îÄ‚îÄ service      # Regras de neg√≥cio
	  ‚îú‚îÄ‚îÄ dto          # Objetos de transfer√™ncia de dados
	  ‚îú‚îÄ‚îÄ config       # Configura√ß√µes do sistema


No Eclipse, clique com o bot√£o direito em `src/main/java`, selecione **Novo > Pacote** e crie os pacotes acima.

---

## **4. Criar as Entidades**

Criar classes de modelo dentro do pacote `model` no Eclipse:

	@Entity
	@Table(name = "users")
	public class user {
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private Long id;
		private String nome;
		private String email;
	}


---

## **5. Criar os Reposit√≥rios e Servi√ßos**

Criar interface do reposit√≥rio dentro de `repository`:

	public interface userRepository extends JpaRepository<user, Long> {
	}


Criar servi√ßo correspondente dentro de `service`:

	@Service
	public class userService {
		@Autowired
		private userRepository userRepository;

		public List<user> listarusers() {
			return userRepository.findAll();
		}
	}

Como o banco de dados n√£o existe ainda, a compila√ß√£o pode dar erro quando o Spring Boot tentar configurar o JPA. Ent√£o, o ideal √© alterarmos o application.properties para simular um banco de dados na mem√≥ria (H2):
	spring.datasource.url=jdbc:h2:mem:testdb	# Cria um banco de dados H2 em mem√≥ria chamado testdb.
	spring.datasource.driverClassName=org.h2.Driver	# Define o driver do H2 para conectar ao banco de dados.
	spring.datasource.username=sa	# Define o usu√°rio padr√£o (sa) para acessar o banco de dados.
	spring.datasource.password=password	# Define a senha padr√£o (password) para acessar o banco de dados.
	spring.jpa.database-platform=org.hibernate.dialect.H2Dialect	# Configura o dialeto do H2 para o Hibernate.
	spring.jpa.hibernate.ddl-auto=update	# Atualiza automaticamente o esquema do banco de dados com base nas entidades.
	spring.h2.console.enabled=true	# Habilita o console do H2 para visualizar e gerenciar o banco de dados.

Tamb√©m √© necess√°rio adicionar a depend√™ncia do H2 no pom.xml:
	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
		<scope>runtime</scope>
	</dependency>

---

## **6. Criar os Endpoints REST**

Criar um controlador REST em `controller`:

	@RestController
	@RequestMapping("/users")
	public class userController {
		@Autowired
		private userService userService;

		@GetMapping
		public List<user> listUsers() {
			return userService.listUsers();
		}
	}
	
No terminal, navegue at√© a pasta do projeto e compile:
	cd backend
	mvn clean install


üìå **Testar no navegador ou CURL:**

Execute o Spring Boot na pasta raiz do backend:
	
	mvn spring-boot:run
	
Teste a aplica√ß√£o com o comando:

	curl -X GET http://localhost:8080/users

---

## **7. Versionar no Git**

Versionar o backend no GitHub:

	git add .
	git commit -m "Configura√ß√£o inicial do backend"
	git push origin main

---

## **üìå Conclus√£o**

Este documento cobre **toda a configura√ß√£o inicial do backend**, incluindo a cria√ß√£o do projeto pelo **Spring Initializr**, estrutura de pacotes, entidades, servi√ßos e primeiros endpoints REST. Essa documenta√ß√£o pode ser usada como refer√™ncia para futuros projetos.


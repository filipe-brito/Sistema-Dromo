# üìå Git Tutorial - Guia de Requisi√ß√µes e Organiza√ß√£o com Git & GitHub

Este guia serve como refer√™ncia para iniciar e gerenciar seus projetos com Git e GitHub, mantendo um fluxo organizado e eficiente.

---

## **1. Criando um Novo Projeto e Enviando ao GitHub**

	### **Passo 1: Criar o Reposit√≥rio no GitHub**
		1. Acesse [GitHub](https://github.com/) e fa√ßa login.
		2. Clique em **New Repository**.
		3. Defina o **nome do reposit√≥rio**, escolha a visibilidade (p√∫blico ou privado) e clique em **Create repository**.
		4. Copie a URL fornecida para clonar o reposit√≥rio.

	### **Passo 2: Clonar o Reposit√≥rio para o Computador**
		No terminal, navegue at√© a pasta onde deseja armazenar o projeto e execute:
		
		git clone https://github.com/SEU_USUARIO/SEU_REPOSITORIO.git
		cd SEU_REPOSITORIO
		

	### **Passo 3: Criar a Estrutura Inicial do Projeto**
		Crie a estrutura de diret√≥rios e arquivos b√°sicos:
		
			mkdir backend frontend docs
			touch README.md
			echo "node_modules/" >> .gitignore
		
		*Observa√ß√£o:* As pastas ser√£o versionadas somente se houver arquivos nelas. Para manter a estrutura, adicione um arquivo vazio, como `.gitkeep`, em pastas vazias.

	### **Passo 4: Enviar ao GitHub**
		Adicione os arquivos ao Git, fa√ßa um commit e envie para o reposit√≥rio remoto:

		git add .
		git commit -m "Inicializa√ß√£o do projeto"
		git push origin main


---

## **2.Atualizando um Projeto Existente**

	### **Passo 1: Navegar at√© a Pasta do Projeto**

		cd /caminho/do/projeto


	### **Passo 2: Baixar as √öltimas Atualiza√ß√µes**

		git pull origin main


	### **Passo 3: Fazer Altera√ß√µes**
		Edite os arquivos necess√°rios ou adicione novos.

	### **Passo 4: Commitar e Enviar ao GitHub**

		git add .
		git commit -m "Descri√ß√£o da altera√ß√£o"
		git push origin main


---

## **3. Organizando Commits e Branches**

	### **Abordagem 1: Identifica√ß√£o via Coment√°rio de Commit**
		Utilize mensagens de commit claras para identificar o tipo de altera√ß√£o:

		git commit -m "Adiciona sistema de autentica√ß√£o JWT"
		git commit -m "Corrige bug na valida√ß√£o do login"
		git commit -m "Atualiza documenta√ß√£o do README"


	### **Abordagem 2: Utilizando Branches Espec√≠ficas**
		Organize o desenvolvimento criando branches para tipos de altera√ß√µes. Isso ajuda a manter o reposit√≥rio organizado e isola as mudan√ßas:

		#### **Branches Principais:**
			- **`main`** ‚Üí Cont√©m o c√≥digo est√°vel pronto para produ√ß√£o.
			- **`develop`** ‚Üí Branch de desenvolvimento, onde novas funcionalidades s√£o integradas.

		#### **Branches Tempor√°rias:**
			- **Feature:** Para novas funcionalidades.
			
				git checkout -b feature/nome-da-feature
			  
			  # Fa√ßa as altera√ß√µes
				  git add .
				  git commit -m "Adiciona nova funcionalidade X"
				  git push origin feature/nome-da-feature
			  
			- **Bugfix:** Para corre√ß√µes de bugs.
			  
				git checkout -b bugfix/nome-do-bug
			  # Corrija o bug
				  git add .
				  git commit -m "Corrige bug Y"
				  git push origin bugfix/nome-do-bug
			  
			- **Chore:** Para tarefas de manuten√ß√£o ou refatora√ß√£o.
			  
				git checkout -b chore/nome-da-tarefa
			  # Realize as melhorias
				  git add .
				  git commit -m "Refatora c√≥digo de Z"
				  git push origin chore/nome-da-tarefa


Ap√≥s finalizar a altera√ß√£o na branch espec√≠fica, mescle com a branch de desenvolvimento (`develop`) ou com a branch principal (`main`) via Pull Request (PR) para revis√£o e integra√ß√£o.

---

## **4. Boas Pr√°ticas de Commits**

	Cada commit deve ter uma mensagem clara e objetiva. Exemplos:

		| Tipo de Altera√ß√£o          | Exemplo de Mensagem de Commit                                      |
		|----------------------------|--------------------------------------------------------------------|
		| üöÄ Nova Funcionalidade      | `git commit -m "Adiciona tela de cadastro de usu√°rios"`             |
		| üêõ Corre√ß√£o de Bug          | `git commit -m "Corrige erro na valida√ß√£o do login"`                |
		| üèß Refatora√ß√£o             | `git commit -m "Refatora servi√ßo de envio de email"`                |
		| üìÑ Atualiza√ß√£o Documental   | `git commit -m "Atualiza README com instru√ß√µes de instala√ß√£o"`       |
		| üõ†Ô∏è Manuten√ß√£o               | `git commit -m "Remove depend√™ncias n√£o utilizadas"`                |

		---

Este guia √© uma refer√™ncia pr√°tica para lidar com as requisi√ß√µes ao Git, tanto na inicializa√ß√£o quanto na atualiza√ß√£o de um projeto, e tamb√©m para organizar os commits por meio de mensagens claras e branches espec√≠ficas.

Espero que este documento ajude sempre que precisar iniciar um novo projeto ou atualizar um existente. Se tiver d√∫vidas ou precisar de mais ajustes, estou √† disposi√ß√£o!


# üìå Plano de A√ß√£o: Configura√ß√£o do Banco de Dados (PostgreSQL)

## **1. Instala√ß√£o do PostgreSQL no Servidor Debian**

	### **Verificar se o PostgreSQL j√° est√° instalado:**
	```sh
	psql --version
	```
	Se o comando acima n√£o funcionar, instale o PostgreSQL:
	```sh
	sudo apt update && sudo apt install postgresql postgresql-contrib
	```

	### **Iniciar e habilitar o PostgreSQL:**
	```sh
	sudo systemctl start postgresql
	sudo systemctl enable postgresql
	```

---

## **2. Configura√ß√£o Inicial do Banco de Dados**

	### **Acessar o PostgreSQL como superusu√°rio:**
	```sh
	sudo -i -u postgres
	psql
	```

	### **Criar um novo banco de dados para o projeto:**
	```sql
	CREATE DATABASE projeto_db;
	```

	### **Criar um usu√°rio e definir permiss√µes:**
	```sql
	CREATE USER projeto_user WITH ENCRYPTED PASSWORD 'senha_segura';
	GRANT ALL PRIVILEGES ON DATABASE projeto_db TO projeto_user;
	```

	### **Sair do PostgreSQL:**
	```sql
	\q
	```
	E saia do modo superusu√°rio:
	```sh
	exit
	```

---

## **3. Configurar Acesso Remoto ao Banco de Dados**

Por padr√£o, o PostgreSQL aceita conex√µes apenas locais. Para acess√°-lo remotamente:

	### **Editar o arquivo `postgresql.conf` para permitir conex√µes externas:**
	```sh
	sudo nano /etc/postgresql/15/main/postgresql.conf
	```
	(Altere "15" para a vers√£o instalada do PostgreSQL caso necess√°rio.)

	Encontre a linha:
	```conf
	# listen_addresses = 'localhost'
	```
	E altere para:
	```conf
	listen_addresses = '*'
	```
	Salve e saia (`CTRL+X`, `Y`, `Enter`).

	### **Configurar regras de acesso em `pg_hba.conf`:**
	```sh
	sudo nano /etc/postgresql/15/main/pg_hba.conf
	```

	Adicione no final:
	```conf
	host    projeto_db    projeto_user    0.0.0.0/0    md5
	```

	### **Reiniciar o PostgreSQL para aplicar as mudan√ßas:**
	```sh
	sudo systemctl restart postgresql
	```

---

## **4. Testar Conex√£o Remota no DBeaver**

	1. Abra o **DBeaver**.
	2. Clique em **Nova Conex√£o** e selecione **PostgreSQL**.
	3. Preencha os seguintes campos:
	   - **Host:** IP do servidor Debian
	   - **Database:** `projeto_db`
	   - **Usu√°rio:** `projeto_user`
	   - **Senha:** `senha_segura`
	4. Clique em **Testar conex√£o** e verifique se est√° funcionando.

	Se houver problemas, verifique se a porta 5432 est√° aberta:
	```sh
	sudo ufw allow 5432/tcp
	```

---

## **5. Gerenciar Versionamento do Banco com Flyway**

	### **Instalar Flyway:**
	```sh
	sudo apt install flyway
	```

	### **Configurar Flyway no projeto:**
	Crie um arquivo `flyway.conf` na raiz do backend:
	```properties
	flyway.url=jdbc:postgresql://IP_DO_SERVIDOR:5432/projeto_db
	flyway.user=projeto_user
	flyway.password=senha_segura
	flyway.locations=filesystem:src/main/resources/db/migration
	```

	Crie o diret√≥rio `src/main/resources/db/migration/` e adicione arquivos SQL com as migra√ß√µes:
	```sql
	-- V1__Criar_tabela_usuarios.sql
	CREATE TABLE users (
		id SERIAL PRIMARY KEY,
		nome VARCHAR(100) NOT NULL,
		email VARCHAR(150) UNIQUE NOT NULL
	);
	```

	Para aplicar as migra√ß√µes:
	```sh
	flyway migrate
	```

---

## **üìå Conclus√£o**

Agora o banco de dados PostgreSQL est√° configurado e pronto para ser usado no backend. Ele pode ser gerenciado remotamente pelo DBeaver, e suas migra√ß√µes ser√£o controladas pelo Flyway, garantindo consist√™ncia e versionamento adequado.

